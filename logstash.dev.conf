############ DEVELOPMENT LOGSTASH CONF ############
# Create the Elasticsearch indexes and load data  #
# from MySQL database.                            #
###################################################

input {
  jdbc { 
    jdbc_connection_string => "jdbc:mysql://mysqlgrotto/grottoce"
    # The user we wish to execute our statement as
    jdbc_user => "root"
    jdbc_password => "root"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        entry.*, 
        GROUP_CONCAT(description.Title, description.Body) as 'descriptions',
        
        cave.name as 'cave name',
        cave.length as 'cave length',
        cave.depth as 'cave depth',
        cave.is_diving as 'cave is diving',
        cave.temperature as 'cave temperature',

        AVG(comments.aestheticism) as 'aestheticism',
        AVG(comments.caving) as 'caving',
        AVG(comments.approach) as 'approach',

        GROUP_CONCAT(DISTINCT massif.name) as 'massif name',
        
        GROUP_CONCAT(rigging.Title, rigging.Observations, rigging.Obstacles) as 'riggings',
        GROUP_CONCAT(location.Body) as 'location',
        GROUP_CONCAT(bibliography.Body) as 'bibliography',

        t_type.en_type as 'undergroud type'

      FROM t_entry entry

      LEFT JOIN t_cave cave ON cave.id = entry.Id_cave

      LEFT JOIN j_entry_description jed ON jed.id_entry = entry.id
      LEFT JOIN t_description description ON description.id = jed.id_description

      LEFT JOIN j_entry_rigging jer ON jer.id_entry = entry.id
      LEFT JOIN t_rigging rigging ON rigging.id = jer.id_rigging

      LEFT JOIN t_location location ON location.id_entry = entry.id
      
      LEFT JOIN t_bibliography bibliography ON bibliography.id_entry = entry.id

      LEFT JOIN t_comment comments ON comments.id_entry = entry.id

      LEFT JOIN j_massif_cave jmc ON jmc.id_cave = cave.id
      LEFT JOIN t_massif massif ON massif.id = jmc.id_massif

      LEFT JOIN t_type ON t_type.id = entry.id_type

      GROUP BY entry.id
    "
    
    type => "entry"
  }

  jdbc { 
    jdbc_connection_string => "jdbc:mysql://mysqlgrotto/grottoce"
    # The user we wish to execute our statement as
    jdbc_user => "root"
    jdbc_password => "root"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        massif.*, 
        GROUP_CONCAT(
            entry.name
            SEPARATOR ', '
        ) as 'entries names',
        GROUP_CONCAT(
          DISTINCT entry.city
          SEPARATOR ', '
        ) as 'entries cities',
        GROUP_CONCAT(
          DISTINCT entry.county
          SEPARATOR ', '
        ) as 'entries counties',
        GROUP_CONCAT(
          DISTINCT entry.country
          SEPARATOR ', '
        ) as 'entries countries',
        GROUP_CONCAT(
          DISTINCT entry.city
          SEPARATOR ', '
        ) as 'entries cities',
        GROUP_CONCAT(
          DISTINCT entry.region
          SEPARATOR ', '
        ) as 'entries regions'
      FROM t_massif massif
      LEFT JOIN j_massif_cave jmc ON jmc.id_massif = massif.id
      LEFT JOIN t_entry entry ON entry.id = jmc.id_entry
      GROUP BY massif.id
    "
    type => "massif"
  }

  jdbc { 
    jdbc_connection_string => "jdbc:mysql://mysqlgrotto/grottoce"
    # The user we wish to execute our statement as
    jdbc_user => "root"
    jdbc_password => "root"
    # The path to our downloaded jdbc driver
    jdbc_driver_library => "/config-dir/mysql-connector-java-5.1.47/mysql-connector-java-5.1.47-bin.jar"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    # our query
    statement => "
      SELECT 
        grotto.*,
        GROUP_CONCAT(caver.Nickname) as 'members'
      FROM t_grotto grotto
      LEFT JOIN j_grotto_caver jgc ON jgc.id_grotto = grotto.id
      LEFT JOIN t_caver caver ON caver.id = jgc.id_caver
      GROUP BY grotto.id
    "
    type => "grotto"
  }
}
output {
  # debugging purpose
  # stdout { codec => json_lines }
  if [type] == "entry" {
    elasticsearch {
      hosts => "elasticsearchgrotto:9200"
      index => "entries-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "massif" {
    elasticsearch {
      hosts => "elasticsearchgrotto:9200"
      index => "massifs-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }

  if [type] == "grotto" {
    elasticsearch {
      hosts => "elasticsearchgrotto:9200"
      index => "grottos-index"
      document_type => "data"
      action => "update"
      document_id => "%{id}"
      doc_as_upsert => true
    }
  }
}